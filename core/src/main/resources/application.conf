dcer {
  workers-per-node = 4
  warmup-time-seconds = 10
  distribution-strategy = "RoundRobin"
  second-order-predicate = "Linear"
  query-path = "./core/src/main/resources/query_1"
}

# DO NOT MODIFY unless you are sure of what you are doing.
akka {
  actor {
    provider = "cluster"

    serialization-bindings {
      "dcer.serialization.CborSerializable" = jackson-cbor
    }

    # NB: Both dispatchers are not being use (default is used)

    # https://doc.akka.io/docs/akka/current/typed/dispatchers.html
    # fixed thread pool for blocking operations
    blocking-io-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 32
      }
      throughput = 1
    }

    my-thread-pool-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 2
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }
  }

  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }
  cluster {

    # NB: This doesn't work as you may expect.
    # This will send a MemberUp for each actor when the min-nr-of-members is reached.
    # In order to receive the MemberJoining/MemberUp events you need to be subscribed to the Cluster.
    # min-nr-of-members = 3

    # log-info = off
    # log-info-verbose = on

    # The first seed node of the seed-nodes lists must be started.
    # Once multiple seed nodes are active, the first seed node can shutdown and another seed node can take the lead role.
    #
    # At least one seed node must be active in the cluster in order to coordinate it.
    #
    # How nodes join the seed-node cluster:
    # When a *seed* node connects, it looks for other seed nodes and, if there isn't any, it takes the lead role.
    # When a node connects, it looks for seed nodes. If no seed node is found, it keeps trying.
    #
    # Seed node messages:
    # InitJoin : This message is sent by the new node to all the seed nodes (except itself).
    # InitJoinAck: This is the reply sent by existing nodes in the cluster to a InitJoin message from a new node.
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:25251"
    ]

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}