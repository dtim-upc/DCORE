@article{core,
  author    = {Marco Bucchi and
               Alejandro Grez and
               Andr{\'{e}}s Quintana and
               Cristian Riveros and
               Stijn Vansummeren},
  title     = {{CORE:} a COmplex event Recognition Engine},
  journal   = {CoRR},
  volume    = {abs/2111.04635},
  year      = {2021},
  url       = {https://arxiv.org/abs/2111.04635},
  eprinttype = {arXiv},
  eprint    = {2111.04635},
  timestamp = {Wed, 10 Nov 2021 16:07:30 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2111-04635.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{core-repo,
  title={CORE Website},
  url={https://github.com/CORE-cer},
  journal={Github},
  year={2022},
  month={Jan},
}

@InProceedings{formal-framework-cep,
  author =  {Alejandro Grez and Cristian Riveros and Mart{\'i}n Ugarte},
  title =   {{A Formal Framework for Complex Event Processing}},
  booktitle =   {22nd International Conference on Database Theory (ICDT 2019)},
  pages =   {5:1--5:18},
  series =  {Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =  {978-3-95977-101-6},
  ISSN =  {1868-8969},
  year =  {2019},
  volume =  {127},
  editor =  {Pablo Barcelo and Marco Calautti},
  publisher =   {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =   {Dagstuhl, Germany},
  URL =     {http://drops.dagstuhl.de/opus/volltexte/2019/10307},
  doi =  {10.4230/LIPIcs.ICDT.2019.5},
  annote = {Keywords: Complex event processing, streaming evaluation, constant delay enumeration}
}

@article{formal-framework-cer,
  author    = {Alejandro Grez and
               Cristian Riveros and
               Mart{\'{\i}}n Ugarte and
               Stijn Vansummeren},
  title     = {A Formal Framework for Complex Event Recognition},
  journal   = {{ACM} Trans. Database Syst.},
  volume    = {46},
  number    = {4},
  pages     = {16:1--16:49},
  year      = {2021},
  url       = {https://doi.org/10.1145/3485463},
  doi       = {10.1145/3485463},
  timestamp = {Fri, 17 Dec 2021 17:23:43 +0100},
  biburl    = {https://dblp.org/rec/journals/tods/GrezRUV21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{on-the-expressiveness,
  author =  {Alejandro Grez and Cristian Riveros and Mart{\'\i}n Ugarte and Stijn Vansummeren},
  title =   {{On the Expressiveness of Languages for Complex Event Recognition}},
  booktitle =   {23rd International Conference on Database Theory (ICDT 2020)},
  pages =   {15:1--15:17},
  series =  {Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =  {978-3-95977-139-9},
  ISSN =  {1868-8969},
  year =  {2020},
  volume =  {155},
  editor =  {Carsten Lutz and Jean Christoph Jung},
  publisher =   {Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
  address =   {Dagstuhl, Germany},
  URL =     {https://drops.dagstuhl.de/opus/volltexte/2020/11939},
  URN =     {urn:nbn:de:0030-drops-119390},
  doi =     {10.4230/LIPIcs.ICDT.2020.15},
  annote =  {Keywords: Query languages, Complex Event Recognition, Logics, Automata theory}
}

@InProceedings{constant-delay-1,
    author = {Luc Segoufin},
    title = {Enumerating with constant delay the answers to a query},
    booktitle = {In Intl. Conf. on Database Theory},
    year = {2013},
    pages = {10--20}
}

@InProceedings{constant-delay-2,
  author="Bagan, Guillaume
  and Durand, Arnaud
  and Grandjean, Etienne",
  editor="Duparc, Jacques
  and Henzinger, Thomas A.",
  title="On Acyclic Conjunctive Queries and Constant Delay Enumeration",
  booktitle="Computer Science Logic",
  year="2007",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="208--222",
  abstract="We study the enumeration complexity of the natural extension of acyclic conjunctive queries with disequalities. In this language, a number of NP-complete problems can be expressed. We first improve a previous result of Papadimitriou and Yannakakis by proving that such queries can be computed in time {\$}c.|{\backslash}cal M|.|{\backslash}varphi({\backslash}cal M)|{\$}where {\$}{\backslash}cal M{\$}is the structure, {\$}{\backslash}varphi({\backslash}cal M){\$}is the result set of the query and c is a simple exponential in the size of the formula ϕ. A consequence of our method is that, in the general case, tuples of such queries can be enumerated with a linear delay between two tuples.",
  isbn="978-3-540-74915-8"
}

@Article{selection-strategies-literature-1,
  author = {Carlson, Jan and Lisper, Bj\"{o}rn},
  title = {A Resource-Efficient Event Algebra},
  year = {2010},
  issue_date = {December, 2010},
  publisher = {Elsevier North-Holland, Inc.},
  address = {USA},
  volume = {75},
  number = {12},
  issn = {0167-6423},
  url = {https://doi.org/10.1016/j.scico.2010.06.010},
  doi = {10.1016/j.scico.2010.06.010},
  abstract = {Events play many roles in computer systems, ranging from hardware interrupts, over event-based software architecture, to monitoring and managing of complex systems. In many applications, however, individual event occurrences are not the main point of concern, but rather the occurrences of certain event patterns. Such event patterns can be defined by means of an event algebra, i.e., expressions representing the patterns of interest are built from simple events and operators such as disjunction, sequence, etc. We propose a novel event algebra with intuitive operators (a claim which is supported by a number of algebraic properties). We also present an efficient detection algorithm that correctly detects any expression with bounded memory, which makes this algebra particularly suitable for resource-constrained applications such as embedded systems.},
  journal = {Sci. Comput. Program.},
  month = {dec},
  pages = {1215–1234},
  numpages = {20},
  keywords = {Event notification, Event detection, Embedded systems}
}

@InProceedings{selection-strategies-literature-2,
  author = {Wu, Eugene and Diao, Yanlei and Rizvi, Shariq},
  title = {High-Performance Complex Event Processing over Streams},
  year = {2006},
  isbn = {1595934340},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1142473.1142520},
  doi = {10.1145/1142473.1142520},
  abstract = {In this paper, we present the design, implementation, and evaluation of a system that executes complex event queries over real-time streams of RFID readings encoded as events. These complex event queries filter and correlate events to match specific patterns, and transform the relevant events into new composite events for the use of external monitoring applications. Stream-based execution of these queries enables time-critical actions to be taken in environments such as supply chain management, surveillance and facility management, healthcare, etc. We first propose a complex event language that significantly extends existing event languages to meet the needs of a range of RFID-enabled monitoring applications. We then describe a query plan-based approach to efficiently implementing this language. Our approach uses native operators to efficiently handle query-defined sequences, which are a key component of complex event processing, and pipeline such sequences to subsequent operators that are built by leveraging relational techniques. We also develop a large suite of optimization techniques to address challenges such as large sliding windows and intermediate result sizes. We demonstrate the effectiveness of our approach through a detailed performance analysis of our prototype implementation under a range of data and query workloads as well as through a comparison to a state-of-the-art stream processor.},
  booktitle = {Proceedings of the 2006 ACM SIGMOD International Conference on Management of Data},
  pages = {407–418},
  numpages = {12},
  keywords = {sequences, complex event language, RFID, query optimization, streams, events},
  location = {Chicago, IL, USA},
  series = {SIGMOD '06}
}

@Article{selection-strategies-literature-3,
  title={On complexity and optimization of expensive queries in complex event processing},
  author={Haopeng Zhang and Yanlei Diao and Neil Immerman},
  journal={Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data},
  year={2014}
}

@InProceedings{data-complexity,
  author = {Vardi, Moshe},
  year = {1982},
  month = {01},
  pages = {137-146},
  title = {The Complexity of Relational Query Languages (Extended Abstract)},
  doi = {10.1145/800070.802186}
}

@InProceedings{skip-till-any-match,
  Author = {Agrawal, Jagrati and Diao, Yanlei and Gyllstrom, Daniel and Immerman, Neil},
  Title = {Efficient Pattern Matching over Event Streams},
  Year = {2008},
  Isbn = {9781605581026},
  Publisher = {Association for Computing Machinery},
  Address = {New York, NY, USA},
  Url = {https://doi.org/10.1145/1376616.1376634},
  Doi = {10.1145/1376616.1376634},
  Abstract = {Pattern matching over event streams is increasingly being employed in many areas including financial services, RFIDbased inventory management, click stream analysis, and electronic health systems. While regular expression matching is well studied, pattern matching over streams presents two new challenges: Languages for pattern matching over streams are significantly richer than languages for regular expression matching. Furthermore, efficient evaluation of these pattern queries over streams requires new algorithms and optimizations: the conventional wisdom for stream query processing (i.e., using selection-join-aggregation) is inadequate.In this paper, we present a formal evaluation model that offers precise semantics for this new class of queries and a query evaluation framework permitting optimizations in a principled way. We further analyze the runtime complexity of query evaluation using this model and develop a suite of techniques that improve runtime efficiency by exploiting sharing in storage and processing. Our experimental results provide insights into the various factors on runtime performance and demonstrate the significant performance gains of our sharing techniques.},
  Booktitle = {Proceedings of the 2008 ACM SIGMOD International Conference on Management of Data},
  Pages = {147–160},
  Numpages = {14},
  Keywords = {query optimization, event streams, pattern matching},
  Location = {Vancouver, Canada},
  Series = {SIGMOD '08}
}

@Book{distributed-computing-book,
  Title     = {Distributed Computing: Principles, Algorithms, and Systems},
  Author    = {Ajay D. Kshemkalyani and Mukesh Singhal},
  Year      = {2011},
  Month     = {March},
  Publisher = {Cambridge University Press},
  Pages     = {756},
  Url       = {https://www.cs.uic.edu/~ajayk/DCS-Book},
  ISBN      = {9780521189842},
}

@misc{maritime-monitoring,
      title={Composite Event Recognition for Maritime Monitoring},
      author={Manolis Pitsikalis and Alexander Artikis and Richard Dreo and Cyril Ray and Elena Camossi and Anne-Laure Jousselme},
      year={2019},
      eprint={1903.03078},
      archivePrefix={arXiv},
      primaryClass={cs.AI}
}


@ARTICLE{network-intrusion-detection,
  author={Mukherjee, B. and Heberlein, L.T. and Levitt, K.N.},
  journal={IEEE Network},
  title={Network intrusion detection},
  year={1994},
  volume={8},
  number={3},
  pages={26-41},
  doi={10.1109/65.283931}
}

@article{industrial-control,
  author    = {Tibor V{\'{a}}mos},
  title     = {Automation production systems and computer integrated manufacturing:
               Mikell P. Groover},
  journal   = {Autom.},
  volume    = {24},
  number    = {4},
  pages     = {587},
  year      = {1988},
  url       = {https://doi.org/10.1016/0005-1098(88)90106-9},
  doi       = {10.1016/0005-1098(88)90106-9},
  timestamp = {Thu, 20 Feb 2020 09:13:34 +0100},
  biburl    = {https://dblp.org/rec/journals/automatica/Vamos88a.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{real-time-analytics,
  author    = {B. S. Sahay and Jayanthi Ranjan},
  title     = {Real time business intelligence in supply chain analytics},
  journal   = {Inf. Manag. Comput. Secur.},
  volume    = {16},
  number    = {1},
  pages     = {28--48},
  year      = {2008},
  url       = {https://doi.org/10.1108/09685220810862733},
  doi       = {10.1108/09685220810862733},
  timestamp = {Sun, 25 Jul 2021 11:36:37 +0200},
  biburl    = {https://dblp.org/rec/journals/imcs/SahayR08.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{fraud-detection,
  title={A Prototype for Credit Card Fraud Management: Industry Paper},
  author={A. Artikis and Nikos Katzouris and Ivo Correia and Chris Baber and Natan Morar and Inna Skarbovsky and Fabiana Fournier and Georgios Paliouras},
  journal={Proceedings of the 11th ACM International Conference on Distributed and Event-based Systems},
  year={2017}
}

@article{flink,
  author    = {Paris Carbone and Asterios Katsifodimos and Stephan Ewen and Volker Markl and Seif Haridi and Kostas Tzoumas},
  title     = {Apache Flink{\texttrademark}: Stream and Batch Processing in a Single Engine},
  journal   = {{IEEE} Data Eng. Bull.},
  volume    = {38},
  number    = {4},
  pages     = {28--38},
  year      = {2015},
  url       = {http://sites.computer.org/debull/A15dec/p28.pdf},
  timestamp = {Tue, 10 Mar 2020 16:23:50 +0100},
  biburl    = {https://dblp.org/rec/journals/debu/CarboneKEMHT15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{flink-cep,
  title={FlinkCEP - Complex Event Processing for Flink},
  url={https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/libs/cep/},
  year={2022},
  month={Jan},
}

@inproceedings{spark,
  author    = {Michael Armbrust and
               Tathagata Das and
               Joseph Torres and
               Burak Yavuz and
               Shixiong Zhu and
               Reynold Xin and
               Ali Ghodsi and
               Ion Stoica and
               Matei Zaharia},
  editor    = {Gautam Das and
               Christopher M. Jermaine and
               Philip A. Bernstein},
  title     = {Structured Streaming: {A} Declarative {API} for Real-Time Applications
               in Apache Spark},
  booktitle = {Proceedings of the 2018 International Conference on Management of
               Data, {SIGMOD} Conference 2018, Houston, TX, USA, June 10-15, 2018},
  pages     = {601--613},
  publisher = {{ACM}},
  year      = {2018},
  url       = {https://doi.org/10.1145/3183713.3190664},
  doi       = {10.1145/3183713.3190664},
  timestamp = {Wed, 21 Nov 2018 12:44:08 +0100},
  biburl    = {https://dblp.org/rec/conf/sigmod/ArmbrustDTYZX0S18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{sase,
  title={High-performance complex event processing over streams},
  author={Eugene Wu and Yanlei Diao and Shariq J. Rizvi},
  journal={Proceedings of the 2006 ACM SIGMOD international conference on Management of data},
  year={2006}
}

@misc{esper,
  title={Complex event processing, streaming analytics, streaming SQL},
  url={https://www.espertech.com/},
  journal={EsperTech},
  year={2021},
  month={Jan}
}

@INPROCEEDINGS{cayuga,
    author = {Alan Demers and Johannes Gehrke and Mingsheng Hong and Mirek Riedewald and Walker White},
    title = {Towards expressive publish/subscribe systems},
    booktitle = {In Proceedings of the International Conference on Extending Database Technology},
    year = {2006},
    pages = {627--644}
}

@inproceedings{tesla,
  author    = {Gianpaolo Cugola and
               Alessandro Margara},
  editor    = {Jean Bacon and
               Peter R. Pietzuch and
               Joe Sventek and
               Ugur {\c{C}}etintemel},
  title     = {{TESLA:} a formally defined event specification language},
  booktitle = {Proceedings of the Fourth {ACM} International Conference on Distributed
               Event-Based Systems, {DEBS} 2010, Cambridge, United Kingdom, July
               12-15, 2010},
  pages     = {50--61},
  publisher = {{ACM}},
  year      = {2010},
  url       = {https://doi.org/10.1145/1827418.1827427},
  doi       = {10.1145/1827418.1827427},
  timestamp = {Tue, 06 Nov 2018 11:07:34 +0100},
  biburl    = {https://dblp.org/rec/conf/debs/CugolaM10.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{trex,
title = {Complex event processing with T-REX},
journal = {Journal of Systems and Software},
volume = {85},
number = {8},
pages = {1709-1728},
year = {2012},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2012.03.056},
url = {https://www.sciencedirect.com/science/article/pii/S0164121212000842},
author = {Gianpaolo Cugola and Alessandro Margara},
keywords = {Complex Event Processing, Event middleware, Information processing, Distributed systems},
abstract = {Several application domains involve detecting complex situations and reacting to them. This asks for a Complex Event Processing (CEP) middleware specifically designed to timely process large amounts of event notifications as they flow from the peripheral to the center of the system, to identify the composite events relevant for the application. To answer this need we designed T-Rex, a new CEP middleware that combines expressiveness and efficiency. On the one hand, it adopts a language (TESLA) explicitly conceived to easily and naturally describe composite events. On the other hand, it provides an efficient event detection algorithm based on automata to interpret TESLA rules. Our evaluation shows that the T-Rex engine can process a large number of complex rules with a reduced overhead, even in the presence of challenging workloads.}
}

@inproceedings{next-cep,
author = {Schultz-M\o{}ller, Nicholas Poul and Migliavacca, Matteo and Pietzuch, Peter},
title = {Distributed Complex Event Processing with Query Rewriting},
year = {2009},
isbn = {9781605586656},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1619258.1619264},
doi = {10.1145/1619258.1619264},
abstract = {The nature of data in enterprises and on the Internet is changing. Data used to be stored in a database first and queried later. Today timely processing of new data, represented as events, is increasingly valuable. In many domains, complex event processing (CEP) systems detect patterns of events for decision making. Examples include processing of environmental sensor data, trades in financial markets and RSS web feeds. Unlike conventional database systems, most current CEP systems pay little attention to query optimisation. They do not rewrite queries to more efficient representations or make decisions about operator distribution, limiting their overall scalability.This paper describes the NEXT CEP system that was especially designed for query rewriting and distribution. Event patterns are specified in a high-level query language and, before being translated into event automata, are rewritten in a more efficient form. Automata are then distributed across a cluster of machines for detection scalability. We present algorithms for query rewriting and distributed placement. Our experiments on the Emulab test-bed show a significant improvement in system scalability due to rewriting and distribution.},
booktitle = {Proceedings of the Third ACM International Conference on Distributed Event-Based Systems},
articleno = {4},
numpages = {12},
location = {Nashville, Tennessee},
series = {DEBS '09}
}

@article{survey-systems-1,
author = {Giatrakos, Nikos and Artikis, Alexander and Deligiannakis, Antonios and Garofalakis, Minos},
title = {Complex Event Recognition in the Big Data Era: A Survey},
year = {2017},
issue_date = {August 2017},
publisher = {VLDB Endowment},
volume = {10},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3137765.3137829},
doi = {10.14778/3137765.3137829},
abstract = {The concept of event processing is established as a generic computational paradigm in various application fields, ranging from data processing in Web environments, over maritime and transport, to finance and medicine. Events report on state changes of a system and its environment. Complex Event Recognition (CER) in turn, refers to the identification of complex/composite events of interest, which are collections of simple events that satisfy some pattern, thereby providing the opportunity for reactive and proactive measures. Examples include the recognition of attacks in computer network nodes, human activities on video content, emerging stories and trends on the Social Web, traffic and transport incidents in smart cities, fraud in electronic marketplaces, cardiac arrhythmias, and epidemic spread. In each scenario, CER allows to make sense of Big event Data streams and react accordingly. The goal of this tutorial is to provide a step-by-step guide for realizing CER in the Big Data era. To do so, it elaborates on major challenges and describes algorithmic toolkits for optimized manipulation of event streams characterized by high volume, velocity and/or lack of veracity, placing emphasis on distributed CER over potentially heterogeneous (data variety) event sources. Finally, we highlight future research directions in the field.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {1996–1999},
numpages = {4}
}

@article{survey-systems-2,
author = {Alevizos, Elias and Skarlatidis, Anastasios and Artikis, Alexander and Paliouras, Georgios},
title = {Probabilistic Complex Event Recognition: A Survey},
year = {2017},
issue_date = {September 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3117809},
doi = {10.1145/3117809},
abstract = {Complex event recognition (CER) applications exhibit various types of uncertainty, ranging from incomplete and erroneous data streams to imperfect complex event patterns. We review CER techniques that handle, to some extent, uncertainty. We examine techniques based on automata, probabilistic graphical models, and first-order logic, which are the most common ones, and approaches based on Petri nets and grammars, which are less frequently used. Several limitations are identified with respect to the employed languages, their probabilistic models, and their performance, as compared to the purely deterministic cases. Based on those limitations, we highlight promising directions for future work.},
journal = {ACM Comput. Surv.},
month = {sep},
articleno = {71},
numpages = {31},
keywords = {probabilistic graphical models, probabilistic automata, probabilistic Petri nets, Event processing, uncertainty, stochastic grammars, probabilistic logics}
}

@ARTICLE{research-evaluation-query,
    author = {Gianpaolo Cugola and Alessandro Margara},
    title = {Processing flows of information: From data stream to complex event processing},
    journal = {ACM Computing Surveys},
    year = {2012}
}

@article{materialize-vs-lazy,
author = {Fagin, Ronald and Kimelfeld, Benny and Reiss, Frederick and Vansummeren, Stijn},
title = {Document Spanners: A Formal Approach to Information Extraction},
year = {2015},
issue_date = {May 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {62},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/2699442},
doi = {10.1145/2699442},
abstract = {An intrinsic part of information extraction is the creation and manipulation of relations extracted from text. In this article, we develop a foundational framework where the central construct is what we call a document spanner (or just spanner for short). A spanner maps an input string into a relation over the spans (intervals specified by bounding indices) of the string. The focus of this article is on the representation of spanners. Conceptually, there are two kinds of such representations. Spanners defined in a primitive representation extract relations directly from the input string; those defined in an algebra apply algebraic operations to the primitively represented spanners. This framework is driven by SystemT, an IBM commercial product for text analysis, where the primitive representation is that of regular expressions with capture variables.We define additional types of primitive spanner representations by means of two kinds of automata that assign spans to variables. We prove that the first kind has the same expressive power as regular expressions with capture variables; the second kind expresses precisely the algebra of the regular spanners—the closure of the first kind under standard relational operators. The core spanners extend the regular ones by string-equality selection (an extension used in SystemT). We give some fundamental results on the expressiveness of regular and core spanners. As an example, we prove that regular spanners are closed under difference (and complement), but core spanners are not. Finally, we establish connections with related notions in the literature.},
journal = {J. ACM},
month = {may},
articleno = {12},
numpages = {51},
keywords = {regular expressions, finite-state automata, Information extraction, document spanners}
}

@article{constant-delay-enumeration-previous-work,
  title={Constant-Delay Enumeration for Nondeterministic Document Spanners},
  author={Antoine Amarilli and P. Bourhis and Stefan Mengel and Matthias Niewerth},
  journal={ACM SIGMOD Record},
  year={2020},
  volume={49},
  pages={25 - 32}
}

@inproceedings{tree-based-system-1,
author = {Liu, Mo and Rundensteiner, Elke and Greenfield, Kara and Gupta, Chetan and Wang, Song and Ari, Ismail and Mehta, Abhay},
title = {E-Cube: Multi-Dimensional Event Sequence Analysis Using Hierarchical Pattern Query Sharing},
year = {2011},
isbn = {9781450306614},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1989323.1989416},
doi = {10.1145/1989323.1989416},
abstract = {Many modern applications, including online financial feeds, tag-based mass transit systems and RFID-based supply chain management systems transmit real-time data streams. There is a need for event stream processing technology to analyze this vast amount of sequential data to enable online operational decision making. Existing techniques such as traditional online analytical processing (OLAP) systems are not designed for real-time pattern-based operations, while state-of-the-art Complex Event Processing (CEP) systems designed for sequence detection do not support OLAP operations. We propose a novel E-Cube model which combines CEP and OLAP techniques for efficient multi-dimensional event pattern analysis at different abstraction levels. Our analysis of the interrelationships in both concept abstraction and pattern refinement among queries facilitates the composition of these queries into an integrated E-Cube hierarchy. Based on this E-Cube hierarchy, strategies of drill-down (refinement from abstract to more specific patterns) and of roll-up (generalization from specific to more abstract patterns) are developed for the efficient workload evaluation. Our proposed execution strategies reuse intermediate results along both the concept and the pattern refinement relationships between queries. Based on this foundation, we design a cost-driven adaptive optimizer called Chase, that exploits the above reuse strategies for optimal E-Cube hierarchy execution. Our experimental studies comparing alternate strategies on a real world financial data stream under different workload conditions demonstrate the superiority of the Chase method. In particular, our Chase execution in many cases performs ten fold faster than the state-of-the art strategy for real stock market query workloads.},
booktitle = {Proceedings of the 2011 ACM SIGMOD International Conference on Management of Data},
pages = {889–900},
numpages = {12},
keywords = {algorithm, complex event processing, optimization, OLAP, streaming},
location = {Athens, Greece},
series = {SIGMOD '11}
}

@inproceedings{tree-based-system-2,
author = {Mei, Yuan and Madden, Samuel},
title = {ZStream: A Cost-Based Query Processor for Adaptively Detecting Composite Events},
year = {2009},
isbn = {9781605585512},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1559845.1559867},
doi = {10.1145/1559845.1559867},
abstract = {Composite (or Complex) event processing (CEP) systems search sequences of incoming events for occurrences of user-specified event patterns. Recently, they have gained more attention in a variety of areas due to their powerful and expressive query language and performance potential. Sequentiality (temporal ordering) is the primary way in which CEP systems relate events to each other. In this paper, we present a CEP system called ZStream to efficiently process such sequential patterns. Besides simple sequential patterns, ZStream is also able to detect other patterns, including conjunction, disjunction, negation and Kleene closure.Unlike most recently proposed CEP systems, which use non-deterministic finite automata (NFA's) to detect patterns, ZStream uses tree-based query plans for both the logical and physical representation of query patterns. By carefully designing the underlying infrastructure and algorithms, ZStream is able to unify the evaluation of sequence, conjunction, disjunction, negation, and Kleene closure as variants of the join operator. Under this framework, a single pattern in ZStream may have several equivalent physical tree plans, with different evaluation costs. We propose a cost model to estimate the computation costs of a plan. We show that our cost model can accurately capture the actual runtime behavior of a plan, and that choosing the optimal plan can result in a factor of four or more speedup versus an NFA based approach. Based on this cost model and using a simple set of statistics about operator selectivity and data rates, ZStream is able to adaptively and seamlessly adjust the order in which it detects patterns on the fly. Finally, we describe a dynamic programming algorithm used in our cost model to efficiently search for an optimal query plan for a given pattern.},
booktitle = {Proceedings of the 2009 ACM SIGMOD International Conference on Management of Data},
pages = {193–206},
numpages = {14},
keywords = {streaming, optimization, complex event processing, algorithm},
location = {Providence, Rhode Island, USA},
series = {SIGMOD '09}
}

@InProceedings{logic-based-system-1,
author="Anicic, Darko
and Fodor, Paul
and Rudolph, Sebastian
and St{\"u}hmer, Roland
and Stojanovic, Nenad
and Studer, Rudi",
editor="Hitzler, Pascal
and Lukasiewicz, Thomas",
title="A Rule-Based Language for Complex Event Processing and Reasoning",
booktitle="Web Reasoning and Rule Systems",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="42--57",
abstract="Complex Event Processing (CEP) is concerned with timely detection of complex events within multiple streams of atomic occurrences. It has useful applications in areas including financial services, mobile and sensor devices, click stream analysis etc. Numerous approaches in CEP have already been proposed in the literature. Event processing systems with a logic-based representation have attracted considerable attention as (among others reasons) they feature formal semantics and offer reasoning service. However logic-based approaches are not optimized for run-time event recognition (as they are mainly query-driven systems). In this paper, we present an expressive logic-based language for specifying and combining complex events. For this language we provide both a syntax as well as a formal declarative semantics. The language enables efficient run time event recognition and supports deductive reasoning. Execution model of the language is based on a compilation strategy into Prolog. We provide an implementation of the language, and present the performance results showing the competitiveness of our approach.",
isbn="978-3-642-15918-3"
}

@article{logic-based-system-2,
  title={An event calculus for event recognition},
  author={Artikis, Alexander and Sergot, Marek and Paliouras, Georgios},
  journal={IEEE Transactions on Knowledge and Data Engineering},
  volume={27},
  number={4},
  pages={895--908},
  year={2014},
  publisher={IEEE}
}

@article{logic-based-system-3,
  title={Logic-based event recognition},
  volume={27},
  DOI={10.1017/S0269888912000264},
  number={4},
  journal={The Knowledge Engineering Review},
  publisher={Cambridge University Press},
  author={Artikis, Alexander and Skarlatidis, Anastasios and Portet, François and Paliouras, Georgios},
  year={2012},
  pages={469–506}
}

@inproceedings{distributed-related-work-1,
author = {Hirzel, Martin},
title = {Partition and Compose: Parallel Complex Event Processing},
year = {2012},
isbn = {9781450313155},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2335484.2335506},
doi = {10.1145/2335484.2335506},
abstract = {Complex event processing uses patterns to detect composite events in streams of simple events. Typically, the events are logically partitioned by some key. For instance, the key can be the stock symbol in stock quotes, the author in tweets, the vehicle in transportation, or the patient in health-care. Composite event patterns often become meaningful only after partitioning. For instance, a pattern over stock quotes is typically meaningful over quotes for the same stock symbol. This paper proposes a pattern syntax and translation scheme organized around the notion of partitions. Besides making patterns meaningful, partitioning also benefits performance, since different keys can be processed in parallel. We have implemented partitioned parallel complex event processing as an extension to IBM's System S high-performance streaming platform. Our experiments with several benchmarks from finance and social media demonstrate processing speeds of up to 830,000 events per second, and substantial speedups for expensive patterns parallelized on multi-core machines as well as multi-machine clusters. Partitioning the event stream before detecting composite events makes event processing both more intuitive and parallel.},
booktitle = {Proceedings of the 6th ACM International Conference on Distributed Event-Based Systems},
pages = {191–200},
numpages = {10},
keywords = {SPL, automata, composite events, CEP, stream processing, regular expressions, pattern matching, parallelism},
location = {Berlin, Germany},
series = {DEBS '12}
}

@inproceedings{distributed-related-work-2,
author = {Mayer, Ruben and Tariq, Muhammad Adnan and Rothermel, Kurt},
title = {Minimizing Communication Overhead in Window-Based Parallel Complex Event Processing},
year = {2017},
isbn = {9781450350655},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3093742.3093914},
doi = {10.1145/3093742.3093914},
abstract = {Distributed Complex Event Processing has emerged as a well-established paradigm to detect situations of interest from basic sensor streams, building an operator graph between sensors and applications. In order to detect event patterns that correspond to situations of interest, each operator correlates events on its incoming streams according to a sliding window mechanism. To increase the throughput of an operator, different windows can be assigned to different operator instances---i.e., identical operator copies---which process them in parallel. This implies that events that are part of multiple overlapping windows are replicated to different operator instances. The communication overhead of replicating the events can be reduced by assigning overlapping windows to the same operator instance. However, this imposes a higher processing load on the single operator instance, possibly overloading it. In this paper, we address the trade-off between processing load and communication overhead when assigning overlapping windows to a single operator instance. Controlling the trade-off is challenging and cannot be solved with traditional reactive methods. To this end, we propose a model-based batch scheduling controller building on prediction. Evaluations show that our approach is able to significantly save bandwidth, while keeping a user-defined latency bound in the operator instances.},
booktitle = {Proceedings of the 11th ACM International Conference on Distributed and Event-Based Systems},
pages = {54–65},
numpages = {12},
keywords = {Communication Overhead, Complex Event Processing, Data Parallelization},
location = {Barcelona, Spain},
series = {DEBS '17}
}

@ARTICLE{load-balancing-1,
  author={Mitzenmacher, M.},
  journal={IEEE Transactions on Parallel and Distributed Systems},
  title={The power of two choices in randomized load balancing},
  year={2001},
  volume={12},
  number={10},
  pages={1094-1104},
  doi={10.1109/71.963420}
}

@inproceedings{load-balancing-2,
  title={When two choices are not enough: Balancing at scale in distributed stream processing},
  author={Nasir, Muhammad Anis Uddin and Morales, Gianmarco De Francisci and Kourtellis, Nicolas and Serafini, Marco},
  booktitle={2016 IEEE 32nd International Conference on Data Engineering (ICDE)},
  pages={589--600},
  year={2016},
  organization={IEEE}
}

@article{load-balancing-3,
  title={Partial key grouping: Load-balanced partitioning of distributed streams},
  author={Nasir, Muhammad Anis Uddin and Morales, Gianmarco De Francisci and Garcia-Soriano, David and Kourtellis, Nicolas and Serafini, Marco},
  journal={arXiv preprint arXiv:1510.07623},
  year={2015}
}

@article{DBLP:journals/vldb/Gedik14,
  author    = {Bugra Gedik},
  title     = {Partitioning functions for stateful data parallelism in stream processing},
  journal   = {{VLDB} J.},
  volume    = {23},
  number    = {4},
  pages     = {517--539},
  year      = {2014}
}

@inproceedings{DBLP:conf/debs/RivettiQABS15,
  author    = {Nicolo Rivetti and
               Leonardo Querzoni and
               Emmanuelle Anceaume and
               Yann Busnel and
               Bruno Sericola},
  title     = {Efficient key grouping for near-optimal load balancing in stream processing
               systems},
  booktitle = {Proceedings of the 9th {ACM} International Conference on Distributed
               Event-Based Systems, {DEBS} '15, Oslo, Norway, June 29 - July 3, 2015},
  pages     = {80--91},
  year      = {2015}
}

@article{DBLP:journals/siamcomp/AzarBKU99,
  author    = {Yossi Azar and
               Andrei Z. Broder and
               Anna R. Karlin and
               Eli Upfal},
  title     = {Balanced Allocations},
  journal   = {{SIAM} J. Comput.},
  volume    = {29},
  number    = {1},
  pages     = {180--200},
  year      = {1999}
}

@inproceedings{DBLP:conf/icde/NasirMGKS15,
  author    = {Muhammad Anis Uddin Nasir and
               Gianmarco De Francisci Morales and
               David Garc{\'{\i}}a{-}Soriano and
               Nicolas Kourtellis and
               Marco Serafini},
  title     = {The power of both choices: Practical load balancing for distributed
               stream processing engines},
  booktitle = {31st {IEEE} International Conference on Data Engineering, {ICDE} 2015,
               Seoul, South Korea, April 13-17, 2015},
  pages     = {137--148},
  year      = {2015}
}

@article{DBLP:journals/pvldb/KatsipoulakisLC17,
  author    = {Nikos R. Katsipoulakis and
               Alexandros Labrinidis and
               Panos K. Chrysanthis},
  title     = {A holistic view of stream partitioning costs},
  journal   = {{PVLDB}},
  volume    = {10},
  number    = {11},
  pages     = {1286--1297},
  year      = {2017}
}

@inproceedings{DBLP:conf/middleware/CaneillELP16,
  author    = {Matthieu Caneill and
               Ahmed El{-}Rheddane and
               Vincent Leroy and
               No{\"{e}}l De Palma},
  title     = {Locality-Aware Routing in Stateful Streaming Applications},
  booktitle = {Proceedings of the 17th International Middleware Conference, Trento,
               Italy, December 12 - 16, 2016},
  pages     = {4},
  year      = {2016}
}

@inproceedings{DBLP:conf/debs/BrennaGHJ09,
  author    = {Lars Brenna and
               Johannes Gehrke and
               Mingsheng Hong and
               Dag Johansen},
  title     = {Distributed event stream processing with non-deterministic finite
               automata},
  booktitle = {Proceedings of the Third {ACM} International Conference on Distributed
               Event-Based Systems, {DEBS} 2009, Nashville, Tennessee, USA, July
               6-9, 2009},
  year      = {2009}
}

@inproceedings{DBLP:conf/debs/BalkesenDWT13,
  author    = {Cagri Balkesen and
               Nihal Dindar and
               Matthias Wetter and
               Nesime Tatbul},
  title     = {{RIP:} run-based intra-query parallelism for scalable complex event
               processing},
  booktitle = {The 7th {ACM} International Conference on Distributed Event-Based
               Systems, {DEBS} '13, Arlington, TX, {USA} - June 29 - July 03, 2013},
  pages     = {3--14},
  year      = {2013}
}

@inproceedings{DBLP:conf/sigmod/BrennaDGHOPRTW07,
  author    = {Lars Brenna and
               Alan J. Demers and
               Johannes Gehrke and
               Mingsheng Hong and
               Joel Ossher and
               Biswanath Panda and
               Mirek Riedewald and
               Mohit Thatte and
               Walker M. White},
  title     = {Cayuga: a high-performance event processing engine},
  booktitle = {Proceedings of the {ACM} {SIGMOD} International Conference on Management
               of Data, Beijing, China, June 12-14, 2007},
  pages     = {1100--1102},
  year      = {2007}
}

@inproceedings{DBLP:conf/debs/Hirzel12,
  author    = {Martin Hirzel},
  title     = {Partition and compose: parallel complex event processing},
  booktitle = {Proceedings of the Sixth {ACM} International Conference on Distributed
               Event-Based Systems, {DEBS} 2012, Berlin, Germany, July 16-20, 2012},
  pages     = {191--200},
  year      = {2012}
}

@article{DBLP:journals/toplas/Hirzel0G17,
  author    = {Martin Hirzel and
               Scott Schneider and
               Bugra Gedik},
  title     = {{SPL:} An Extensible Language for Distributed Stream Processing},
  journal   = {{ACM} Trans. Program. Lang. Syst.},
  volume    = {39},
  number    = {1},
  pages     = {5:1--5:39},
  year      = {2017}
}

@article{earley,
author = {Earley, Jay},
title = {An Efficient Context-Free Parsing Algorithm},
year = {1970},
issue_date = {Feb 1970},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2},
issn = {0001-0782},
url = {https://doi.org/10.1145/362007.362035},
doi = {10.1145/362007.362035},
abstract = {A parsing algorithm which seems to be the most efficient general context-free algorithm known is described. It is similar to both Knuth's LR(k) algorithm and the familiar top-down algorithm. It has a time bound proportional to n3 (where n is the length of the string being parsed) in general; it has an n2 bound for unambiguous grammars; and it runs in linear time on a large class of grammars, which seems to include most practical context-free programming language grammars. In an empirical comparison it appears to be superior to the top-down and bottom-up algorithms studied by Griffiths and Petrick.},
journal = {Commun. ACM},
month = {feb},
pages = {94–102},
numpages = {9},
keywords = {computational complexity, parsing, syntax analysis, compilers, context-free grammar}
}

@article{jvm,
  title={The java virtual machine},
  author={Venners, Bill},
  journal={Java and the Java virtual machine: definition, verification, validation},
  year={1998},
  publisher={McGraw-Hill}
}

@article{scala,
  title={An overview of the Scala programming language},
  author={Odersky, Martin and Altherr, Philippe and Cremet, Vincent and Emir, Burak and Maneth, Sebastian and Micheloud, St{\'e}phane and Mihaylov, Nikolay and Schinz, Michel and Stenman, Erik and Zenger, Matthias},
  year={2004}
}

@book{akka,
  title={Akka concurrency},
  author={Wyatt, Derek},
  year={2013},
  publisher={Artima Incorporation}
}

@misc{sbt,
  title={Sbt: The interactive build tool},
  url={https://www.scala-sbt.org/index.html},
  year={2022},
  month={Jan},
}

@inproceedings{experiment-example,
author = {Ray, Medhabi and Lei, Chuan and Rundensteiner, Elke A.},
title = {Scalable Pattern Sharing on Event Streams*},
year = {2016},
isbn = {9781450335317},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2882903.2882947},
doi = {10.1145/2882903.2882947},
abstract = {Complex Event Processing (CEP) has emerged as a technology of choice for high performance event analytics in time-critical decision-making applications. Yet it is becoming increasingly difficult to support high-performance event processing due to the rising number and complexity of event pattern queries and the increasingly high velocity of event streams. In this work we design the SPASS framework that successfully tackles these demanding CEP workloads. Our SPASS optimizer identifies opportunities for effective shared processing among CEP queries by leveraging time-based event correlations among queries. The problem of pattern sharing is shown to be NP-hard by reducing the Minimum Substring Cover problem to our CEP pattern sharing problem. The SPASS optimizer is designed that finds a shared pattern plan in polynomial-time covering all sequence patterns while still guaranteeing an optimality bound. To execute this shared pattern plan, the SPASS runtime employs stream transactions that assure concurrent shared maintenance and re-use of sub-patterns across queries. Our experimental study confirms that the SPASS framework achieves over 16 fold performance improvement for a wide range of experiments compared to the state-of-the-art solution.},
booktitle = {Proceedings of the 2016 International Conference on Management of Data},
pages = {495–510},
numpages = {16},
keywords = {sharing, complex event processing, sequence pattern},
location = {San Francisco, California, USA},
series = {SIGMOD '16}
}

@misc{acm-reprodocubility,
  title={ACM SIGMOD 2022 Availability \& Reproducibility},
  url={https://reproducibility.sigmod.org/},
  year={2022},
  month={Jan},
}
